#!/usr/bin/env python3
import asyncio
from grader.tcp import Servidor
import re

USERS = {}
CHANNELS = {}

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()
    if conexao.nick.lower() not in USERS:
        return
    USERS.pop(conexao.nick.lower())
    for users in CHANNELS.values():
        if conexao.nick.lower() in users:
            users.remove(conexao.nick.lower())
            for u in users:
                USERS[u].enviar(b':%s QUIT :Connection closed\r\n' % conexao.nick)

def handle_nick (conexao, dados: bytes):
    global USERS
    payload = dados.split (b' ')[1]
    nickname = payload.split(b'\r')[0]
    if validar_nome (nickname):
        if nickname.lower() in USERS:
            conexao.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (conexao.nick, nickname))
        elif conexao.nick != b'*':
            USERS.pop(conexao.nick.lower())
            USERS[nickname.lower()] = conexao
            conexao.enviar(b':%s NICK %s\r\n' % (conexao.nick, nickname))
            conexao.nick = nickname
        else:    
            USERS[nickname.lower()] = conexao
            conexao.nick = nickname
            conexao.enviar(b':server 001 %s :Welcome\r\n' % nickname)
            conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % nickname)
    else:
        conexao.enviar(b':server 432 %s %s :Erroneous nickname\r\n' % (conexao.nick, nickname))

def handle_privmsg(conexao, dados: bytes):
    global USERS
    global CHANNELS
    payload = dados.split(b' ')
    dest = payload[1]
    msg = payload[2][1:-2]
    if dest.startswith(b'#'):
        if dest.lower() in CHANNELS:
            for user in CHANNELS[dest.lower()]:
                if user != conexao.nick.lower():
                    USERS[user].enviar(b':%s PRIVMSG %s :%s\r\n' % (conexao.nick, dest, msg))
    else:
        if dest.lower() in USERS:
            USERS[dest.lower()].enviar(b':%s PRIVMSG %s :%s\r\n' % (conexao.nick, dest, msg))

def handle_join(conexao, dados: bytes):
    global USERS
    global CHANNELS

    payload = dados.split(b' ')
    canal = payload[1].split(b'\r')[0]
    if canal.startswith(b'#') and validar_nome(canal[1:]):
        if canal.lower() not in CHANNELS:
            CHANNELS[canal.lower()] = [conexao.nick.lower()]
        else:
            CHANNELS[canal.lower()].append(conexao.nick.lower())
        for user in CHANNELS[canal.lower()]:
            USERS[user].enviar(b':%s JOIN :%s\r\n' % (conexao.nick, canal))

def handle_part(conexao, dados: bytes):
    global USERS
    global CHANNELS
    payload = dados.split(b' ')
    canal = payload[1].strip()
    for user in CHANNELS[canal]:
        USERS[user].enviar(b':%s PART %s\r\n' % (conexao.nick, canal))
    CHANNELS[canal].remove(conexao.nick.lower())

def dados_recebidos(conexao, dados: bytes):
    print(conexao, dados)
    if dados == b'':
        return sair(conexao)

    if dados.find(b'\n') == -1: #se nao tem \n
        conexao.residual += dados
        return
    elif dados.find(b'\n') != len(dados)-1: #se tem mais coisa depois do primeiro \n
        spl = dados.split(b'\n')
        for i in spl[:-1]:
            dados_recebidos(conexao, i+b'\n')
        if spl[-1]:
            dados_recebidos(conexao, spl[-1])
        return
    if conexao.residual: 
        dados = conexao.residual+dados
        conexao.residual = b''
    
    if dados.startswith(b'PING'):
        payload = dados.split (b' ')[1]
        conexao.enviar(b':server PONG server :' + payload)
    elif dados.startswith(b'NICK'):
        handle_nick(conexao, dados)
    elif dados.startswith(b'PRIVMSG'):
        handle_privmsg(conexao, dados)
    elif dados.startswith(b'JOIN'):
        handle_join(conexao, dados)
    elif dados.startswith(b'PART'):
        handle_part(conexao, dados)

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.residual = b''
    conexao.nick = b'*'
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
